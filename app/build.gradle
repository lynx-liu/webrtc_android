apply plugin: 'com.android.application'

android {
    def platformType = getPlatform()

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion '30.0.3'
    defaultConfig {
        applicationId "com.android.webrtc"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        vectorDrawables.useSupportLibrary = true

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
        }
    }

    signingConfigs {
        if(platformType == "generic_x86_64") {
            release {
                storeFile file("android10.keystore")
                storePassword '123456'
                keyAlias 'platform'
                keyPassword '123456'
            }

            debug {
                storeFile file("android10.keystore")
                storePassword '123456'
                keyAlias 'platform'
                keyPassword '123456'
            }
        } else {
            release {
                storeFile file("platform.keystore")
                storePassword '123456'
                keyAlias 'platform'
                keyPassword '123456'
            }

            debug {
                storeFile file("platform.keystore")
                storePassword '123456'
                keyAlias 'platform'
                keyPassword '123456'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def static getPlatform() {
    def adbCommand = 'adb shell getprop ro.product.device'
    Process process = adbCommand.execute()
    process.in.eachLine { processing ->
        println processing
        return processing
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation project(path: ':libengine')
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'com.alibaba:fastjson:1.2.83'
}
